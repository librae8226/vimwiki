[[index|Home Page]]
%toc index

== AR ==

Usage: ar [emulation options] [-]{dmpqrstx}[abcfilNoPsSuvV] [member-name] [count] archive-file file...<br>
ar -M [<mri-script]<br>
 commands:<br>
  d            - delete file(s) from the archive<br>
  m[ab]        - move file(s) in the archive<br>
  p            - print file(s) found in the archive<br>
  q[f]         - quick append file(s) to the archive<br>
  r[ab][f][u]  - replace existing or insert new file(s) into the archive<br>
  t            - display contents of archive<br>
  x[o]         - extract file(s) from the archive<br>
 command specific modifiers:<br>
  [a]          - put file(s) after [member-name]<br>
  [b]          - put file(s) before [member-name] (same as [i])<br>
  [N]          - use instance [count] of name<br>
  [f]          - truncate inserted file names<br>
  [P]          - use full path names when matching<br>
  [o]          - preserve original dates<br>
  [u]          - only replace files that are newer than current archive contents<br>
 generic modifiers:<br>
  [c]          - do not warn if the library had to be created<br>
  [s]          - create an archive index (cf. ranlib)<br>
  [S]          - do not build a symbol table<br>
  [T]          - make a thin archive<br>
  [v]          - be verbose<br>
  [V]          - display the version number<br>
  @<file>      - read options from <file><br>

We use
    ar cvq LIBNAME.a SRC1.c SRC2.c ...
to create archiive but if run this command again, there will be two several .o files in archive.
And if we use
    ar cvr LIBNAME.a SRC1.c SRC2.c ...
the newer .o files will replace the older ones in archive.

== GCC ==
=== General Help ===
Usage: gcc [options] file...<br>
Options:<br>
  -pass-exit-codes         Exit with highest error code from a phase<br>
  --help                   Display this information<br>
  --target-help            Display target specific command line options<br>
  --help={target|optimizers|warnings|undocumented|params}[,{[]joined|[]separate}] Display specific types of command line options<br>
  (Use '-v --help' to display command line options of sub-processes)<br>
  -dumpspecs               Display all of the built in spec strings<br>
  -dumpversion             Display the version of the compiler<br>
  -dumpmachine             Display the compiler's target processor<br>
  -print-search-dirs       Display the directories in the compiler's search path<br>
  -print-libgcc-file-name  Display the name of the compiler's companion library<br>
  -print-file-name=<lib>   Display the full path to library <lib><br>
  -print-prog-name=<prog>  Display the full path to compiler component <prog><br>
  -print-multi-directory   Display the root directory for versions of libgcc<br>
  -print-multi-lib         Display the mapping between command line options and multiple library search directories<br>
  -print-multi-os-directory Display the relative path to OS libraries<br>
  -print-sysroot-headers-suffix Display the sysroot suffix used to find headers<br>
  -Wa,<options>            Pass comma-separated <options> on to the assembler<br>
  -Wp,<options>            Pass comma-separated <options> on to the preprocessor<br>
  -Wl,<options>            Pass comma-separated <options> on to the linker<br>
  -Xassembler <arg>        Pass <arg> on to the assembler<br>
  -Xpreprocessor <arg>     Pass <arg> on to the preprocessor<br>
  -Xlinker <arg>           Pass <arg> on to the linker<br>
  -combine                 Pass multiple source files to compiler at once<br>
  -save-temps              Do not delete intermediate files<br>
  -pipe                    Use pipes rather than intermediate files<br>
  -time                    Time the execution of each subprocess<br>
  -specs=<file>            Override built-in specs with the contents of <file><br>
  -std=<standard>          Assume that the input sources are for <standard><br>
  --sysroot=<directory>    Use <directory> as the root directory for headers and libraries<br>
  -B <directory>           Add <directory> to the compiler's search paths<br>
  -b <machine>             Run gcc for target <machine>, if installed<br>
  -V <version>             Run gcc version number <version>, if installed<br>
  -v                       Display the programs invoked by the compiler<br>
  -###                     Like -v but options quoted and commands not executed<br>
  -E                       Preprocess only; do not compile, assemble or link<br>
  -S                       Compile only; do not assemble or link<br>
  -c                       Compile and assemble, but do not link<br>
  -o <file>                Place the output into <file><br>
  -x <language>            Specify the language of the following input files Permissible languages include: c c++ assembler none 'none' means revert to the default behavior of guessing the language based on the file's extension<br>

Options starting with -g, -f, -m, -O, -W, or --param are automatically<br>
passed on to the various sub-processes invoked by gcc.  In order to pass<br>
other options on to these processes the -W<letter> options must be used.<br>

    NOTE! As in marlin project, gcc use a [opt] "--sysroot", see that meanning.

=== Shared Library ===    
-fpic<br>
Generate position-independent code (PIC) suitable for use in a shared library, if supported for the target machine.  Such code accesses all constant addresses through a global offset table (GOT).  The dynamic loader resolves the GOT entries when the program starts (the dynamic loader is notpart of GCC; it is part of the operating system).  If the GOT size for the linked executable exceeds a machine-specific maximum size, you get an error message from the linker indicating that -fpic does not work; in that case, recompile with -fPIC instead.  (These maximums are 8k on the SPARC and 32k on the m68k and RS/6000.  The 386 has no such limit.)

Position-independent code requires special support, and therefore works only on certain machines.  For the 386, GCC supports PIC for System V but not for the Sun 386i.  Code generated for the IBM RS/6000 is always position-independent.

When this flag is set, the macros "__pic__" and "__PIC__" are defined to 1.

-fPIC<br>
If supported for the target machine, emit position-independent code, suitable for dynamic linking and avoiding any limit on the size of the global offset table.  This option makes a difference on the m68k, PowerPC and SPARC.

Position-independent code requires special support, and therefore works only on certain machines.

When this flag is set, the macros "__pic__" and "__PIC__" are defined to 2.

-shared<br>
Produce a shared object which can then be linked with other objects to form an executable.  Not all systems support this option.  For predictable results, you must also specify the same set of options that were used to generate code (-fpic, -fPIC, or model suboptions) when you specify this option.[1]

-Wl,option<br>
Pass option as an option to the linker.  If option contains commas, it is split into multiple options at the commas.

NOTE: In Ubuntu 8.10 and later versions, for LDFLAGS, the option -Wl,-z,relro is used.  To disable, use -Wl,-z,norelro.

=== Make Warning Clock skew detected ===
make: warning:  Clock skew detected.  Your build may be incomplete.<br>
`touch Makefile`<br>
works well.<br>
