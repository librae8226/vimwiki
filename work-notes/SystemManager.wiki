[[index|Hame Page]]

%toc index

== Tasks ==
=== 20110824 ===
*Description*<br>
    Applications running on main CPU want to know the who caused warmup.<br>
    Three warmup source, implemented by IRQ: VGA, HDMI and WIFI/BT.<br>
    Need to workout a gtv calling flow test code for these features.<br>
*Key Point*<br>
# Where is the ISR of corresponding warmup source.
# Where to define the type of warmup source. (SystemManager.h)
# Where is the communication with main CPU and how it is done. (MV_SM_Comm_Task)
*Issues*<br>


== Misc Notes ==
=== Global Questions ===
- In SM_SW_Architecture, section 2 HW Resource Management, how to avoid that confilict actually?<br>
- In SM_SW_Architecture, figure 1, how can SystemManager send PWR_EN signal before SOC download sm code to it?<br>
- In SM code, what is "CPUINDEX"<br>

=== ARM926 Processor ===
Refer to<br>
http://www.arm.com/products/processors/classic/arm9/arm926.php<br>

=== ARM966 Processor ===
Refer to<br>
http://infocenter.arm.com/help/topic/com.arm.doc.ddi0213e/index.html<br>

=== VGA DPMS ===
DPMS (Display Power Management Signaling) is the power management standard for VGA monitors.<br>
Refer to<br>
http://www.ccs.neu.edu/home/bchafy/pstrip/dpmspowerstrip.html<br>

=== TCM (Tightly Coupled Memory) ===
Refer to<br>
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0338g/Chdhbjjb.html<br>

=== Configure U-Boot Environment ===
e.g.<br>
{{{
setenv bootargs 'macaddr=00:50:43:01:22:BE root=/dev/nfs console=ttyS0,115200 nfsroot=192.168.1.130:/home/yliao/workspace/marvell/SystemManager/linux_root/home/berlin/berlin_rootfs ip=dhcp init=/init androidboot console=ttyS0'
setenv bootfile 'image_yliao/sm/uImage'
setenv smfile 'image_yliao/sm/sm.bin'
setenv serverip '192.168.1.92'
setenv bootcmd 'tftpboot 0xf7f80000 $(smfile);target;'
}}}

=== CEC (Consumer Electronics Control) ===
A feature designed to allow the user to command and control two or more CEC-enabled boxes, that are connected through HDMI, by using only one of their remote controls.<br>
e.g. controlling a television set, set-top box and DVD player using only the remote control of the TV.<br>
Refer to<br>
http://en.wikipedia.org/wiki/HDMI#CEC<br>

=== GTV Build & Boot ===
*Build*<br>
_Marvell Board:_
{{{
for A0, A1:
./build_gtv -cA0 -bDMP -sSM_Profile -pBerlin_Player_GTV_BG2_A0
./build_gtv -fsm,sdk,unandimg -cA0 -bDMP -sSM_Profile -pBerlin_Player_GTV_BG2_A0
OR for Z1:
./build_gtv -cZ1 -bBDP -sSM_Profile -pBerlin_Player_GTV_BG2
./build_gtv -fsm,sdk,unandimg -cZ1 -bBDP -sSM_Profile -pBerlin_Player_GTV_BG2
}}}
_Wistron Cotehill Board:_
{{{
./build_gtv -cA0 -bDMP -sSM_Profile -pBerlin_Player_GTV_BG2_A0 -fsm
}}}
*U-Boot Environment*<br>
_*Marvell Board:*_
{{{
setenv serverip '10.38.55.3'
setenv bootargs 'macaddr=00:77:4C:C1:F4:44 console=ttyS0,115200 root=/dev/nfs nfsroot=10.38.55.3:/home/yliao/workspace/marvell/b0/rootfs,v3 ip=dhcp init=/init'
setenv bootargs 'macaddr=00:77:4C:C1:F4:44 console=ttyS0,115200 root=/dev/nfs nfsroot=10.38.55.3:/home/yliao/workspace/marvell/b0/nfsroot,v3 ip=dhcp init=/init'
setenv bootfile 'b0/uImage'
setenv smfile 'b0/sm.bin'
setenv pmfile 'b0/Marvell_DMP_A0.uboot'
setenv bootcmd 'execscr $(pmfile);tftpboot 0xf7f80000 $(smfile);target;'
setenv bootcmd 'execscr $(pmfile);tftpboot 0xf7f80000 $(smfile);target;tftpboot 0x1c400000 $(bootfile);bootm 0x1c400000;'
}}}
_*Marvell Board B0:*_
{{{
setenv serverip '10.38.55.3'
setenv bootargs 'macaddr=00:50:43:01:24:14 console=ttyS0,115200 root=/dev/nfs nfsroot=10.38.55.3:/home/yliao/workspace/marvell/b0/rootfs,v3 ip=dhcp init=/init'
setenv bootargs 'macaddr=00:50:43:01:24:14 console=ttyS0,115200 root=/dev/nfs nfsroot=10.38.55.3:/home/yliao/workspace/marvell/b0/nfsroot,v3 ip=dhcp init=/init'
setenv bootfile 'b0/uImage'
setenv smfile 'b0/sm.bin'
setenv pmfile 'b0/Marvell_DMP_A0.uboot'
setenv bootcmd 'execscr $(pmfile);tftpboot 0xf7f80000 $(smfile);target;'
setenv bootcmd 'execscr $(pmfile);tftpboot 0xf7f80000 $(smfile);target;tftpboot 0x1c400000 $(bootfile);bootm 0x1c400000;'
}}}
_*Wistron Cotehill Board:*_
{{{
setenv serverip '10.38.120.39'
setenv bootargs 'macaddr=00:68:3E:FD:50:44 root=/dev/nfs console=ttyS0,115200 nfsroot=10.38.55.122:/home/work/yliao/GTV/nfsroot ip=dhcp init=/init androidboot console=ttyS0'
setenv bootargs 'macaddr=00:68:3E:FD:50:44 root=/dev/nfs console=ttyS0,115200 nfsroot=10.38.55.122:/home/work/yliao/GTV/rootfs ip=dhcp init=/init androidboot console=ttyS0'
setenv bootargs 'macaddr=00:68:3E:FD:50:44 root=/dev/nfs console=ttyS0,115200 nfsroot=10.38.55.3:/home/yliao/workspace/marvell/sm/nfsroot ip=dhcp init=/init androidboot console=ttyS0'
setenv bootargs 'macaddr=00:68:3E:FD:50:44 root=/dev/nfs console=ttyS0,115200 nfsroot=10.38.55.3:/home/yliao/workspace/marvell/sm/rootfs ip=dhcp init=/init androidboot console=ttyS0'
setenv bootfile 'ies/yliao/sm/uImage'
setenv smfile 'ies/yliao/sm/sm.bin'
set pmfile 'ies/yliao/sm/Marvell_DMP_A0.uboot'
setenv bootcmd 'execscr $(pmfile);tftpboot 0xf7f80000 $(smfile);target;'
setenv bootcmd 'execscr $(pmfile);tftpboot 0xf7f80000 $(smfile);target;tftpboot 0x1c400000 $(bootfile);bootm 0x1c400000;'
}}}

=== A Linux Application Built in GaloisSoftware ===
Here comes some of trivial.<br>
At the very first, we should know what we need, excutables or libraries.<br>
Here we suppose to build an excutable file which depend on some other libraries.<br>
*Step 1*<br>
Create a Profile as "GaloisSoftware/Profiles/Berlin_SMGeneric":<br>
{{{
##################################################################
#
## Global common configurations 
#
##################################################################

image_list = APP SM LinuxKernelCopy

Owner = hjcai@marvell.com

SM Properties
  PlatformSetting : SM NonOS Berlin_BG2_PEK
  Options : release
  lib_list : SM_Core
SM Properties_end

APP Properties
  PlatformSetting : CPU1 SingleCPU Linux Berlin_BG2_PEK
  lib_list : SMGeneric
APP Properties_end

LinuxKernelCopy Properties
  PlatformSetting : CPU1 LinuxKernel Berlin_BG2_PEK
LinuxKernelCopy Properties_end
}}}

*Step 2*<br>
Create your source code folder in someplace such as "GaloisSoftware/APP/SMGeneric".<br>
Organize like:<br>
{{{
|-- Makefile
|-- source
      |-- main.c
}}}
_Makefile:_<br>
{{{
######################################################
# Build configurations

include $(TOPDIR)/config

######################################################
# Module library

MODULE_LIBRARY = SMGeneric

MODULE_SRCS = $(wildcard source/*.c)

MODULE_OBJS = $(patsubst %.c,%.o,$(patsubst %.s,%.o,$(patsubst %.cpp,%.o,$(MODULE_SRCS))))

######################################################
# Header files

PUBLIC_HEADER_FILES =

######################################################
# Module flags

MODULE_CFLAGS = -I$(TOPDIR)/SysMgr/Agent/include
MODULE_CFLAGS = -I$(TOPDIR)/OSAL/include

######################################################
# Unittest setting

UNITTEST_SRCS =

UNITTEST_OBJS =

######################################################
# Release setting

# released source files
RELEASE_SRCS =

# released header files
RELEASE_HEADER_FILES =

# released library
RELEASE_LIBRARY = MODULE_LIBRARY

# source files to build released library
RELEASE_LIB_SRCS = MODULE_SRCS

# object files to build released library
RELEASE_LIB_OBJS = MODULE_OBJS

######################################################
# Common dependency process

include $(TOPDIR)/Scripts/mk_default.in
}}}
_main.c:_<br>
{{{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/ioctl.h>

#include "ErrorCode.h"
#include "SM_common.h"
#include "SM_Agent.h"
#include "OSAL_api.h"

#define BLOCKING_READ

static void MV_SM_Generic(void)
{
    int readlen = 0;
    MV_SM_Message sm_msg_send;
    MV_SM_Message sm_msg_recv;

    memset(&sm_msg_send, 0, sizeof(MV_SM_Message));
    memset(&sm_msg_recv, 0, sizeof(MV_SM_Message));

    sm_msg_send.m_iModuleID = MV_SM_ID_TEMP;
    sm_msg_recv.m_iModuleID = MV_SM_ID_TEMP;

    /* open sm device */
    MV_SM_Agent_Init();

    /* send message */
    sm_msg_send.m_pucMsgBody[0] = MV_SM_TEMP_EN;
    sm_msg_send.m_iMsgLen = sizeof(int);
    MV_SM_Agent_Write_Msg(sm_msg_send.m_iModuleID, sm_msg_send.m_pucMsgBody, sm_msg_send.m_iMsgLen);

    sm_msg_send.m_pucMsgBody[0] = MV_SM_TEMP_SAMPLE;
    sm_msg_send.m_pucMsgBody[1] = MV_SM_TEMP_SAMPLE_CES;
    sm_msg_send.m_iMsgLen = sizeof(int) * 2;
    MV_SM_Agent_Write_Msg(sm_msg_send.m_iModuleID, sm_msg_send.m_pucMsgBody, sm_msg_send.m_iMsgLen);

#ifdef BLOCKING_READ		
    /* Get message from Power module */
    MV_SM_Agent_IO_CTRL(SM_Enable_WaitQueue, sm_msg_send.m_iModuleID);
    if (MV_SM_Agent_Read_Msg(sm_msg_recv.m_iModuleID, &sm_msg_recv, &readlen) == S_OK)
    {
        printf("Chip Temperature: %d degC\n", sm_msg_recv.m_pucMsgBody[0]);
    }
    MV_SM_Agent_IO_CTRL(SM_Disable_WaitQueue, sm_msg_send.m_iModuleID);
#endif

    sm_msg_send.m_pucMsgBody[0] = MV_SM_TEMP_DISEN;
    sm_msg_send.m_iMsgLen = sizeof(int);
    MV_SM_Agent_Write_Msg(sm_msg_send.m_iModuleID, sm_msg_send.m_pucMsgBody, sm_msg_send.m_iMsgLen);

    /* close sm device */
    MV_SM_Agent_Close();
}

int main(int argc, char *argv[])
{
    while(1)
    {
        MV_SM_Generic();
        MV_OSAL_Task_Sleep(1000);
    }
    return 0;
}
}}}

*Step 3*
Create a application config directory in "GaloisSoftware/Applications/", named as "SMGeneric".<br>
Create three files in it: LibEnv.py, LibInfo.xml and Makefile.<br>
_LibEnv.py:_
{{{
#!/usr/bin/python

import os

def BuildEnvHandle(buildEnv):

###############################################################################################
#
# User configuration space
#
###############################################################################################

###############################################################################################
#
# Library configuration for Link
#
###############################################################################################

  return 0
}}}
_LibInfo.xml:_
{{{
<?xml version="1.0" ?>
<LIB_INFO>
	<LIB_NAME>SMGeneric</LIB_NAME>
	<LIB_TYPE>application</LIB_TYPE>
	<LIB_DEPEND>libSMAgent libOSAL</LIB_DEPEND>
	<LIB_DEPEND_EXTERNAL></LIB_DEPEND_EXTERNAL>
	<MODULE_LIST>SMGeneric</MODULE_LIST>

    <SETTING_DEFINE_LIST>       
    </SETTING_DEFINE_LIST>
	
    <MODULE_DEFINE_LIST>
		<MODULE name="SMGeneric">
			<OWNER>hjcai@marvell.com</OWNER>
			<PATH>APP/SMGeneric</PATH>
			<DEPEND></DEPEND>
		</MODULE>
    </MODULE_DEFINE_LIST>

</LIB_INFO>
}}}
_Makefile:_
{{{
include $(GALOIS_SOFTWARE_DIR)/Scripts/mk_library.in
}}}

*Step 4*
Do the same thing for a library config in "GaloisSoftware/Library/", named as "libSMAgent".<br>
They are almost the same style.<br>
_LibEnv.py:_
{{{
#!/usr/bin/python

import os

def BuildEnvHandle(buildEnv):

###############################################################################################
#
# User configuration space
#
###############################################################################################

###############################################################################################
#
# Library configuration for Link
#
###############################################################################################
 
  return 0
}}}
_LibInfo.xml:_
{{{
<?xml version="1.0" ?>
<LIB_INFO>
	<LIB_NAME>libSMAgent</LIB_NAME>
	<LIB_TYPE>dynamic_lib</LIB_TYPE>
	<LIB_DEPEND>libOSAL</LIB_DEPEND>
	<LIB_DEPEND_EXTERNAL></LIB_DEPEND_EXTERNAL>
	<MODULE_LIST>SMAgent</MODULE_LIST>

    <SETTING_DEFINE_LIST>
    </SETTING_DEFINE_LIST>
	
    <MODULE_DEFINE_LIST>
    	<MODULE name="SMAgent">
    		<OWNER>hjcai@marvell.com</OWNER>
			<PATH>SysMgr/Agent</PATH>
    		<DEPEND></DEPEND>
    	</MODULE>
    </MODULE_DEFINE_LIST>

</LIB_INFO>
}}}
_Makefile:_
{{{
include $(GALOIS_SOFTWARE_DIR)/Scripts/mk_library.in
}}}

OK! That's all, then we can go to GaloisSoftware root dir to build it.<br>
Simply type:<br>
`make Berlin_SMGeneric`<br>
Then a set a stuffs will be placed in a directory named "GaloisSoftware/Builds/"<br>
Copy them into linux rootfs and run!<br>

=== Turn on the Build Print While Building GaloisSoftware ===
In "GaloisSoftware/Scripts/lib_generator.sh"<br>
{{{
# $1 = target lib
# $2 = source dir
# $3 = $(AR)
# $4 = $(CC)
# $5 = $(Galois_LDFLAGS) + $(MODULE_LDFLAGS) 
# $6 = $(Galois_LDFLAGS_END)
# error_report=$2/build_report 2>>error_report

cur_dir=$PWD

if [ -d $2 ]; then

	cd $2
	
	rm -f $1
	
	for lib_module in $(find -name "*.a")
	do
		$3 -x $lib_module
	done
	
	if [ $# -lt 4 ]; then 
	    # create static library
	    $3 -cr $1 $(find -name '*.o')
	else
	    # create dynamic library, TURN ON THIS LINE !!!
	    echo $4 -fPIC -shared -o $1 $5 $(find -name '*.o') $6 
	    $4 -fPIC -shared -o $1 $5 $(find -name '*.o') $6 
	fi
	
	ret_value=$?
	
	if [ $ret_value -ne 0 ]; then
	        exit $ret_value
	fi
	
	cd $cur_dir
	
fi
}}}

=== Alternate compile based on vfd_type ===
Add this line:<br>
`<SETTING_DEFINE name="vfd_type" default="pt6311"></SETTING_DEFINE>`<br>
in e.g. "GaloisSoftware/Application/SM_Core/LibInfo.xml"<br>
And add these lines in "SysMgr/Core/Makefile":<br>
{{{
ifeq ($(vfd_type),pt6311)
OBJECTS += source/vfd_pt6311.o
CFLAGS += -DVFD_PT6311
}}}

Then try build again.<br>

=== About Pinmux ===
In file *MV88DE3100_SDK/Customization_Data/config*, there will define a *PLATFORM_INFO*<br>
and point to a C Header file such as<br>
*System_Configuration/Platform_Info/Marvell_DMP_A0/pinmux_setting.h*<br>
This is the pinmux setting for this specific board.<br>
    !!NOTE!! Here the *config* file would be copied from file e.g. *config.bg2.a0.gtv*<br>
    automatically by build script.<br>

Actually there are many other low-level related stuffs here. Such as:<br>
- PARTITION_TABLE_PATH
- PLATFORM_INFO
- FLASH_TYPE
- MEMORY_MAP_OPTION
- CPU_TYPE
- BOOT_TYPE
- ......
etc.<br>

OK. If there's some related issue, turn to this.<br>

=== VFD Cannot Work After Linux or GTV Having Booted Up ===
Board: BDP<br>
CPU: Z1<br>
In *linux-2.6.35.4/arch/arm/mach-mv88de3015/modules/sm/sm_main.c*<br>
Add several lines in *berlin_sm_open_dev()* as below:<br>
{{{
	int reg = 0x55555555;
	GA_REG_WORD32_READ(0xF7FCD040, &reg);
	printk(">>>>> kernel: SM_GSM_SEL -> 0x%X", reg);
}}}
This will print value of the sm pinmux register.<br>
See? It should be *0x0001d410*, but after linux or gtv boots up,<br>
It is changed to *0x0001c410*. So, VFD using SPI, it cannot work.

=== libSMAgent.so ===
libSMAgent.so is built into libPEAgent, so if we need libSMAgent, linking libPEAgent.so is fine.<br>

%template header-footer
